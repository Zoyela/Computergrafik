package simple;

import jrtr.*;
import jrtr.glrenderer.GLRenderPanel;

import javax.swing.*;

import java.awt.event.*;

import javax.vecmath.*;

import java.util.Arrays;
import java.util.Timer;
import java.util.TimerTask;

/**
 * Implements a simple application that opens a 3D rendering window and 
 * shows a rotating cube.
 */
public class simple_cylinder{	

		
	public static VertexData makeCylinder() {	
		
		public void setRenderContext(RenderContext r) {
			this.renderContext = r;
		}
			
			
								
			// Make a scene manager and add the object
			sceneManager = new SimpleSceneManager();
			
			//shape = new Shape(Cube.createCube());
			shape = new Shape(Cylinder.createCylinder(3));
			
			sceneManager.addShape(shape);
			
			// Add the scene to the renderer
			renderContext.setSceneManager(sceneManager);
			
			// Load some more shaders
		    normalShader = renderContext.makeShader();
		    try {
		    	normalShader.load("../jrtr/shaders/normal.vert", "../jrtr/shaders/normal.frag");
		    } catch(Exception e) {
		    	System.out.print("Problem with shader:\n");
		    	System.out.print(e.getMessage());
		    }
	
		    diffuseShader = renderContext.makeShader();
		    try {
		    	diffuseShader.load("../jrtr/shaders/diffuse.vert", "../jrtr/shaders/diffuse.frag");
		    } catch(Exception e) {
		    	System.out.print("Problem with shader:\n");
		    	System.out.print(e.getMessage());
		    }

		    // Make a material that can be used for shading
			material = new Material();
			material.shader = diffuseShader;
			material.texture = renderContext.makeTexture();
			try {
				material.texture.load("../textures/plant.jpg");
			} catch(Exception e) {				
				System.out.print("Could not load texture.\n");
				System.out.print(e.getMessage());
			}

			// Register a timer task
		    Timer timer = new Timer();
		    basicstep = 0.01f;
		    currentstep = basicstep;
		    timer.scheduleAtFixedRate(new AnimationTask(), 0, 10);
		}
	}

	/**
	 * A timer task that generates an animation. This task triggers
	 * the redrawing of the 3D scene every time it is executed.
	 */
	public static class AnimationTask extends TimerTask
	{
		public void run()
		{
			// Update transformation by rotating with angle "currentstep"
    		Matrix4f t = shape.getTransformation();
    		Matrix4f rotX = new Matrix4f();
    		rotX.rotX(currentstep);
    		Matrix4f rotY = new Matrix4f();
    		rotY.rotY(currentstep);
    		t.mul(rotX);
    		t.mul(rotY);
    		shape.setTransformation(t);
    		
    		// Trigger redrawing of the render window
    		renderPanel.getCanvas().repaint(); 
		}
	}

	/**
	 * A mouse listener for the main window of this application. This can be
	 * used to process mouse events.
	 */
	public static class SimpleMouseListener implements MouseListener
	{
    	public void mousePressed(MouseEvent e) {}
    	public void mouseReleased(MouseEvent e) {}
    	public void mouseEntered(MouseEvent e) {}
    	public void mouseExited(MouseEvent e) {}
    	public void mouseClicked(MouseEvent e) {}
	}
	
	/**
	 * A key listener for the main window. Use this to process key events.
	 * Currently this provides the following controls:
	 * 's': stop animation
	 * 'p': play animation
	 * '+': accelerate rotation
	 * '-': slow down rotation
	 * 'd': default shader
	 * 'n': shader using surface normals
	 * 'm': use a material for shading
	 */
	
	
	/**
	 * The main function opens a 3D rendering window, implemented by the class
	 * {@link SimpleRenderPanel}. {@link SimpleRenderPanel} is then called backed 
	 * for initialization automatically. It then constructs a simple 3D scene, 
	 * and starts a timer task to generate an animation.
	 */
	public static void main(String[] args)
	{		
		// Make a render panel. The init function of the renderPanel
		// (see above) will be called back for initialization.
		renderPanel = new SimpleRenderPanel();
		
		// Make the main window of this application and add the renderer to it
		JFrame jframe = new JFrame("simple");
		jframe.setSize(500, 500);
		jframe.setLocationRelativeTo(null); // center of screen
		jframe.getContentPane().add(renderPanel.getCanvas());// put the canvas into a JFrame window

		// Add a mouse and key listener
	    renderPanel.getCanvas().addMouseListener(new SimpleMouseListener());
	    renderPanel.getCanvas().addKeyListener(new SimpleKeyListener());
		renderPanel.getCanvas().setFocusable(true);   	    	    
	    
	    jframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    jframe.setVisible(true); // show window
	}
	
	
	
	public final static class Cylinder {
	
		// Segments = sides
		public static VertexData createCylinder(int segments) {
			
			// The vertex positions of the cube
			
			float v[] = calculateAllCircleVertices(segments, 0);
	
			
			// The vertex colors
	
			float c[] = calculateColors(v.length, segments);

	
			// Construct a data structure that stores the vertices, their
			// attributes, and the triangle mesh connectivity
			VertexData vertexData = renderContext.makeVertexData(segments*2 + 2);
			vertexData.addElement(c, VertexData.Semantic.COLOR, 3);
			vertexData.addElement(v, VertexData.Semantic.POSITION, 3);
			
			// The triangles (three vertex indices for each triangle)
			
			int indices[] = concatInt( calculateAllCircleIndices(segments), calculateBorderIndices(segments, v) );
			
			vertexData.addIndices(indices);
			
			return vertexData;
		}
		
		public static float[] calculateColors(int amount, int segments) {
			float[] res = new float[ amount ];
			int a = 0;
			
			// first circle
			for(int i = 0; i<segments+1; i++) {
				if(i % 2 == 0) {
					res[a++] = 0;
					res[a++] = 0;
					res[a++] = 0;
				} else {
					res[a++] = 1;
					res[a++] = 1;
					res[a++] = 1;
				}
			}
			
			// second circle
			for(int i = segments+1; i<segments*2 + 1; i++) {
				if(i % 2 != 0) {
					res[a++] = 0;
					res[a++] = 0;
					res[a++] = 0;
				} else {
					res[a++] = 1;
					res[a++] = 1;
					res[a++] = 1;
				}
			}
			return res;
		}
		
		
		public static float[] calculateAllCircleVertices(int segments, int y) {
			return concatFloat( calculateCircleVertices(segments, y), calculateCircleVertices(segments, y + 4) );
		}
		
	
		public static int[] calculateAllCircleIndices(int segments) {
			return concatInt( calculateCircleIndices(segments, 0, 1), calculateCircleIndices(segments, segments+1, segments+2) );
		}
		
		public static int[] calculateBorderIndices(int segments, float vertices[]) {		
			int[] res = new int[ segments * 2 * 3 ];
			int a = 0;
			int secondCenter = segments + 1;
			
			for(int i = 1; i<segments; i++) {
				
				if(i != segments-1 && (i == secondCenter || i+segments+1 == secondCenter || i+segments+2 == secondCenter || i+1 == secondCenter)) continue;
				
				res[a++] = i;
				res[a++] = i + segments + 1;
				res[a++] = i + segments + 2;
				
				res[a++] = i;
				res[a++] = i + 1;
				res[a++] = i + segments + 2;
			
				// last two triangle which connect last with first points
				if(i == segments-1) {
					res[a++] = 1;
					res[a++] = segments + 2;
					res[a++] = i + segments + 2;
					
					res[a++] = 1;
					res[a++] = i + 1;
					res[a++] = i + 1 + segments + 1;
				}
			}
			
			return res;
		}
		
		public static int[] calculateCircleIndices(int segments, int center, int start) {
			int[] res = new int[ (segments) * 3 ];
			int a = 0;
			
			for(int i = start; i<(start + segments); i++) {
				if(i == (start + segments - 1)) {
					// connect last with first point
					res[a++] = center;
					res[a++] = i;
					res[a++] = start;
				} else {
					// connect normal points
					res[a++] = center;
					res[a++] = i;
					res[a++] = i+1;
				}
			}
	
			return res;
		}
		
		public static float[] calculateCircleVertices(int segments, int y) {
			float[] res = new float[ (segments+1) * 3 ];
			int a = 3, r = 1;
			double phi = (double) (2*Math.PI / segments);
	
			res[0] = 0;
			res[1] = y;
			res[2] = 0;
			
			for(int i = 0; i<segments; i++) {
				res[a++] = (float) Math.cos( i * phi) * r;
				res[a++] = y;
				res[a++] = (float) Math.sin( i * phi) * r;
			}
			
			return res;
		}
	}

}
	
	public static float[] concatFloat(float[] first, float[] second) {
		float[] result = Arrays.copyOf(first, first.length + second.length);
		System.arraycopy(second, 0, result, first.length, second.length);
		return result;
	}
	
	public static int[] concatInt(int[] first, int[] second) {
		int[] result = Arrays.copyOf(first, first.length + second.length);
		System.arraycopy(second, 0, result, first.length, second.length);
		return result;
	}
	
	
}
