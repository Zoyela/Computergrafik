package simple;

import java.util.Arrays;
import jrtr.VertexData;

public final class Cylinder {
	
	
		// Segments = sides
		public static VertexData makeCylinder(int segments) {
			
			// The vertex positions of the cube
			
			float v[] = calculateAllCircleVertices(segments, 0);
	
			
			// The vertex colors
	
			float c[] = calculateColors(v.length, segments);

	
			// Construct a data structure that stores the vertices, their
			// attributes, and the triangle mesh connectivity
			VertexData vertexData = simple.renderContext.makeVertexData(segments*2 + 2);
			vertexData.addElement(c, VertexData.Semantic.COLOR, 3);
			vertexData.addElement(v, VertexData.Semantic.POSITION, 3);
			
			// The triangles (three vertex indices for each triangle)
			
			int indices[] = concatInt( calculateAllCircleIndices(segments), calculateBorderIndices(segments, v) );
			
			vertexData.addIndices(indices);
			
			return vertexData;
		}
		
		public static float[] calculateColors(int amount, int segments) {
			float[] res = new float[ amount ];
			int a = 0;
			
			// first circle
			for(int i = 0; i<segments+1; i++) {
				if(i % 2 == 0) {
					res[a++] = 0;
					res[a++] = 0;
					res[a++] = 0;
				} else {
					res[a++] = 1;
					res[a++] = 1;
					res[a++] = 1;
				}
			}
			
			// second circle
			for(int i = segments+1; i<segments*2 + 1; i++) {
				if(i % 2 != 0) {
					res[a++] = 0;
					res[a++] = 0;
					res[a++] = 0;
				} else {
					res[a++] = 1;
					res[a++] = 1;
					res[a++] = 1;
				}
			}
			return res;
		}
		
		
		public static float[] calculateAllCircleVertices(int segments, int y) {
			return concatFloat( calculateCircleVertices(segments, y), calculateCircleVertices(segments, y + 4) );
		}
		
	
		public static int[] calculateAllCircleIndices(int segments) {
			return concatInt( calculateCircleIndices(segments, 0, 1), calculateCircleIndices(segments, segments+1, segments+2) );
		}
		
		public static int[] calculateBorderIndices(int segments, float vertices[]) {		
			int[] res = new int[ segments * 2 * 3 ];
			int a = 0;
			int secondCenter = segments + 1;
			
			for(int i = 1; i<segments; i++) {
				
				if(i != segments-1 && (i == secondCenter || i+segments+1 == secondCenter || i+segments+2 == secondCenter || i+1 == secondCenter)) continue;
				
				res[a++] = i;
				res[a++] = i + segments + 1;
				res[a++] = i + segments + 2;
				
				res[a++] = i;
				res[a++] = i + 1;
				res[a++] = i + segments + 2;
			
				// last two triangle which connect last with first points
				if(i == segments-1) {
					res[a++] = 1;
					res[a++] = segments + 2;
					res[a++] = i + segments + 2;
					
					res[a++] = 1;
					res[a++] = i + 1;
					res[a++] = i + 1 + segments + 1;
				}
			}
			
			return res;
		}
		
		public static int[] calculateCircleIndices(int segments, int center, int start) {
			int[] res = new int[ (segments) * 3 ];
			int a = 0;
			
			for(int i = start; i<(start + segments); i++) {
				if(i == (start + segments - 1)) {
					// connect last with first point
					res[a++] = center;
					res[a++] = i;
					res[a++] = start;
				} else {
					// connect normal points
					res[a++] = center;
					res[a++] = i;
					res[a++] = i+1;
				}
			}
	
			return res;
		}
		
		public static float[] calculateCircleVertices(int segments, int y) {
			float[] res = new float[ (segments+1) * 3 ];
			int a = 3, r = 1;
			double phi = (double) (2*Math.PI / segments);
	
			res[0] = 0;
			res[1] = y;
			res[2] = 0;
			
			for(int i = 0; i<segments; i++) {
				res[a++] = (float) Math.cos( i * phi) * r;
				res[a++] = y;
				res[a++] = (float) Math.sin( i * phi) * r;
			}
			
			return res;
		}
	
	public static float[] concatFloat(float[] first, float[] second) {
		float[] result = Arrays.copyOf(first, first.length + second.length);
		System.arraycopy(second, 0, result, first.length, second.length);
		return result;
	}
	
	public static int[] concatInt(int[] first, int[] second) {
		int[] result = Arrays.copyOf(first, first.length + second.length);
		System.arraycopy(second, 0, result, first.length, second.length);
		return result;
	}
	
}